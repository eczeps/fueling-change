====================== app.py =====================
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify
                   )
from werkzeug import secure_filename
app = Flask(__name__)

import bcrypt
import sys,os,random,math
import databaseAccess

#TODO: (ELLIE) Figure out team database
#TODO: (ELLIE) figure out salts
#TODO: (ESTRELLA) finish go & completed buttons
#TODO: (ESTRELLA) fix individual achievement page so the table is always present
#TODO: (ESTRELLA) make templates more inheritey
#TODO: (ESTRELLA) create google doc for alpha version
#TODO: run all the code through WAVE (whoever pushes last)
#TODO: (ESTRELLA) make sure we always use url_for (even in templates)
#TODO: (ELLIE) make a powerpoint/outline for the presentation
#TODO: (ESTRELLA) submit a request for a team shell account, and email him when you do it

currDB = databaseAccess.d
# currUser = 1
# realistically, this will be an actual user's ID
# for now we will just set it to 1 until we implement sessions & logging in
# run makeAchieves and then webpageTest for this to work
# or make None to see the unlogged in pages

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True


'''handles the homepage route, and handles both when users are logged in and when they aren't'''
@app.route('/')
def index():
    conn = databaseAccess.getConn(currDB)
    #--accessing current user information
    #userID will either be the user's number or None if they're not logged in
    userID = session.get('uID')
    print('userID in index route: ' + str(userID))

    username = ""
    if userID != None:
        username = databaseAccess.getUser(conn, userID)['username']
    #else:
        #not logged in profile won't show so we don't need to worry about
        #username being empty
    #--end of accessing current user information

    return render_template('main.html', title="Fueling Change",
                                        isLoggedIn=(True if userID!=None else False),
                                        userURL=username)


'''handles the page where users can search for achievements'''
@app.route('/achievements/', methods = ['POST', 'GET'], defaults={'searchFor': ""})
@app.route('/achievements/<searchFor>', methods = ['POST', 'GET'])
def achievement(searchFor):
    conn = databaseAccess.getConn(currDB)
    #--accessing current user information
    userID = session.get('uID')
    # stars is short for starred achievements
    stars = []

    username = ""
    if userID != None:
        username = databaseAccess.getUser(conn, userID)["username"]
        stars = databaseAccess.getStarredAchieves(conn, userID) 
    #else:
        #not logged in
    #--end of accessing current user information

    #if the user is searching for something, access the database to get search results
    searchFor = request.form.get('searchterm')
    if request.method == 'POST':
        a = []
        if(searchFor==""):
            a = databaseAccess.getAllAchievements(conn)
        else:
            a = databaseAccess.getAchievements(conn,searchFor)

    #if the user is just loading the page, show them all the achievements
    elif request.method == 'GET':
        searchFor = ''
        a = databaseAccess.getAllAchievements(conn)


    return render_template('achievementSearch.html',title=searchFor,
                                                    achievements=a,
                                                    isLoggedIn=(True if userID!=None else False),
                                                    reps=stars,
                                                    userURL=username)


'''handles the page where users can search for users'''
@app.route('/users/', methods = ['POST', 'GET'], defaults={'userSearch': ""})
@app.route('/users/<userSearch>', methods = ['POST', 'GET'])
def users(userSearch):
    conn = databaseAccess.getConn(currDB)
    #find the users that have a matching search term in their
    #first, last, or username
    #if the user is searching for something, access the database to get search results
    userSearch = request.form.get('searchterm')
    userID=session.get('uID')

    username=""
    if userID != None:
        username=databaseAccess.getUser(conn, userID)['username']

    if request.method == 'POST':
        a = []
        if(userSearch != ""):
            print("RIGHT HERE")
            print(userSearch)
            a = databaseAccess.getUsers(conn,userSearch)

    #if the user is just loading the page, show them nothing
    elif request.method == 'GET':
        userSearch = ''
        a = []
    
    return render_template('userSearch.html',title=userSearch,
                                             users=a,
                                             isLoggedIn=(True if userID!=None else False),
                                             userURL=username)

#want to use below for user searches which will display a list based on search result.
#similar to the actor search in one of our assignments
@app.route('/profile/', methods=['POST', 'GET'], defaults={'username': ""})
@app.route('/profile/<username>/', methods=['POST', 'GET'])
def profile(username):
    #TODO: make the URls just the username, don't have them include the UID
    userID = session.get('uID')

    #get user information
    #TODO: we really shouldn't be getting userInfo if current_uID is None. More generally,
    #we need to decide how to handle loading this page if the user is not logged in (and therefore current_uID is None)
    conn = databaseAccess.getConn(currDB)
    #TODO: see hwk6 to handle when user is an empty string (see movies route)
    
    if (userID!=None): #TODO: add another condition here so that this only happens when a user is viewing their own page (right now this happens when they're viewing ANY profile)
        #if the user is logged in
        userInfo = databaseAccess.getUser(conn, userID)

        #variables for formatting template
        titleString = userInfo['first_Name'].lower() + ' ' + userInfo['last_Name'].lower()
        userURL = userInfo['username'].lower()

        #TODO: this line doesn't work and I'm not sure what it was supposed to do?
        #currUser = (int(UID) == current_uID if current_uID else False) #boolean

        #get achievements
        allComps = databaseAccess.getCompAchievements(conn, userID)
        allStars = databaseAccess.getStarredAchieves(conn, userID)

        #calculate emissions
        has_carbon_data = databaseAccess.doesUserHaveCarbonData(conn, userID)
        print('has_carbon_data in profile route: ' + str(has_carbon_data))
        if has_carbon_data:
            print('has carbon data!!')
            emissionsRAW = databaseAccess.calculateUserFootprint(conn, userID)
            emissions = databaseAccess.prettyRound(emissionsRAW)
        else:
            #TODO: maybe figure out a better thing to display when a user doesn't have emissions data than just a 0?
            emissions = 0
    
        return render_template('profile.html',  title=titleString,
                                                emissions = format(emissions, ','),
                                                isLoggedIn=(True if userID!=None else False),
                                                userURL=userURL,
                                                thisUser=userID, #will this be -1 if it needs to be?
                                                compAchis=allComps,
                                                starAchis=allStars)
    #TODO: make it so users can view other peoples profiles if they're logged in (add an elif here)
    else:
        #user isn't logged in
        flash('you aren\'t logged in!')
        return redirect(url_for('login'))

'''route to handle user updating or entering new data through the reporting form'''
@app.route('/useraction/report/<user>/', methods=['POST'])
def reportData(user):
    UID = session.get('uID') #format was first-lastname-UID
    #get information
    conn = databaseAccess.getConn(currDB)
    #take data user inputted to the form and put it in the database before re-rendering
    databaseAccess.updateUserInfo(conn, UID, 
                                    request.form.get('flights'), 
                                    request.form['drives'], 
                                    request.form['lamb'], 
                                    request.form['beef'], 
                                    request.form['cheese'], 
                                    request.form['pork'], 
                                    request.form['turkey'], 
                                    request.form['chicken'], 
                                    request.form['laundry'])
    return(redirect('/useraction/' + user + '/'))


'''route to handle actions users can take from their profile, including:
report achievements
view statistics
search users
'''
@app.route('/useraction/', methods=['POST', 'GET'], defaults={'user': ""})
@app.route('/useraction/<user>/', methods=['POST', 'GET'])
def useract(user):
    

    #TODO: do we want to change this so that you can only view your own profile?
    #the way it is right now, profiles are publicly viewable and we should really
    #think about whether randos are able to edit other peoples' profiles this way
    #The if/else's I (alissa) set up should prevent randos from editing: see profile.html

    #grab the user id
    UID = session.get('uID')

    #get information
    conn = databaseAccess.getConn(currDB)
    userInfo = databaseAccess.getUser(conn, UID)

    #variables for formatting template
    titleString = userInfo['first_Name'].lower() + ' ' + userInfo['last_Name'].lower()
    currUser = (int(UID) == session['uID']) #boolean
    return render_template('useraction.html', isLoggedIn=currUser,
                                                userURL=user,
                                                thisUser=session['uID'])


'''route to display information for a given achievement and allows the user 
to mark as completed if logged in '''
@app.route('/searched-profile/<user>/', methods= ['POST', 'GET'])
def searchedProfile(user):
    conn = databaseAccess.getConn(currDB)
    #need for if the user selects their profile tab
    userID = session.get('uID')

    #this is the searched for information
    searchedInfo = databaseAccess.getUserByUsername(conn, user)
    nameTitle = searchedInfo['first_Name'] + " " + searchedInfo['last_Name']
    searchedID = searchedInfo['UID']

    #achievements of the seached user that we want to look at
    allComps = databaseAccess.getCompAchievements(conn, searchedID)
    allStars = databaseAccess.getStarredAchieves(conn, searchedID)

    #calculate emissions of the searched user
    has_carbon_data = databaseAccess.doesUserHaveCarbonData(conn, searchedID)
    # print('has_carbon_data in profile route: ' + str(has_carbon_data))
    if has_carbon_data:
        print('has carbon data!!')
        emissionsRAW = databaseAccess.calculateUserFootprint(conn, searchedID)
        emissions = databaseAccess.prettyRound(emissionsRAW)
    else:
        #TODO: maybe figure out a better thing to display when a user doesn't have emissions data than just a 0?
        emissions = 0

    return render_template('searchedProfile.html', title = nameTitle,
                                                   thisUser = userID, #in nav bar
                                                   isLoggedIn = (True if userID!=None else False),
                                                   emissions = emissions,
                                                   compAchis = allComps,
                                                   starAchis = allStars)


'''route to display information for a given achievement and allows the user 
to mark as completed if logged in '''
@app.route('/achievement/<AID>/', methods= ['POST', 'GET'])
def achieveinfo(AID):
    conn = databaseAccess.getConn(currDB)
    #get information
    #if the user is logged in then allow to self report
    userID = None
    user_info = None
    if (session.get('uID') != None):
        userID = session.get('uID')
        user_info = databaseAccess.getUser(conn, userID)

    achieve_info = databaseAccess.getAchieveInfo(conn, AID)
    #returns the UID, first name, last name of users who completed
    users = databaseAccess.getAchievePeople(conn, AID)  
    return render_template('achieveinfo.html', achieveID = AID, 
                                               info = achieve_info,
                                               users = users,
                                               thisUser = userID, 
                                               user_info = user_info,
                                               isLoggedIn = (True if userID!=None else False))

'''route to update the database when the user clicked "yes" under completed 
to mark as completed if logged in '''
@app.route('/updateCompleted/', methods= ['POST'])
def updateCompleted():
    conn = databaseAccess.getConn(currDB)
    aid = request.form['aid'] #gets the achievement ID to update 
    print("achieve id" + aid) 
    #don't need to check if logged in because they need to be logged in to click on the yes button
    userID = session.get('uID')
    print(userID)

    #update the backend
    databaseAccess.insertCompleted(conn, userID, aid)
    
    grabData = databaseAccess.getUserForAchievement(conn, userID, aid)
    user_info = grabData[0]
    hasCount = grabData[1]
    print(user_info)

    print("HERE")
    return jsonify({'UID': userID,
                    'first': user_info['first_Name'],
                    'last': user_info['last_Name'],
                    'username': user_info['username'],
                    'count': user_info['count'] if hasCount else 1})


@app.route('/login/', methods=['GET'])
def login():
    #userID is the id of the user currently logged in (if any)
    userID = session.get('uID') 
    if userID!=None: #TODO:i don't think this logic works right I think it's backwards
        #user is logged in; they're trying to log out
        flash('Logging out!')
        #how can they be logging out if the userID is already None
        #wouldn't they already be logged out?
        session['uID'] = None
        return redirect(url_for('index'))
    else:
        #user isn't logged in; they're trying to log in
        return render_template('login_page.html',
                                isLoggedIn=False,
                                userURL="",
                                title="Login")
            

@app.route('/setUID/', methods=["POST"])
def setUID():
    #gets called when a user presses submit on the login form
    try:
        username = request.form.get('username')
        password = request.form.get('password')
        conn = databaseAccess.getConn(currDB)
        #userID will either be the user's ID or -1 if it was an invalid username/password combo. this also returns the hashed password
        row = databaseAccess.getUIDOnLogin(conn, username)
        print(str(row))
        userID = row['UID']
        hashed_password = row['password']
        print('got all necessary data in login')
        if userID == -1:
            print('database didnt think your username was legit')
            flash("login incorrect. Try again or join")
            return redirect(url_for('index'))
        else:
            hashed2 = bcrypt.hashpw(password.encode('utf-8'),hashed_password.encode('utf-8'))
            hashed2_str = hashed2.decode('utf-8')
            print('hashed_password: ' + hashed_password)
            print('hashed2_str: ' + hashed2_str)
            if hashed2_str == hashed_password:
                print('your password was right! logging you in')
                flash('successfully logged in as '+username)
                session['uID'] = userID
                username=databaseAccess.getUser(conn, session.get('uID'))['username']
                return redirect(url_for('profile', username=username))
            else:
                print('your password was prob wrong')
                flash('login incorrect. Try again or join')
                return redirect(url_for('login'))
    except Exception as err:
        print('error in login: ' + str(err))
        flash('form submission error '+ str(err))
        return redirect( url_for('login') )



@app.route('/signup/', methods=["GET", "POST"])
def signup():
    if request.method == "GET":
        #get method renders a page w a form
        return render_template('signup.html')
    else:
        try:
            username = request.form['username']
            passwd1 = request.form['password1']
            passwd2 = request.form['password2']
            if passwd1 != passwd2:
                print('passwords do not match')
                flash('passwords do not match')
                return redirect(url_for('signup'))
            #hash the password the user provided
            hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
            #convert it from bytes to string
            hashed_str = hashed.decode('utf-8')

            #post also takes the first and last name for database and URL purposes
            fName = request.form.get('firstName')
            lName = request.form.get('lastName')
            conn = databaseAccess.getConn(currDB)
            uID = databaseAccess.setUIDOnSignup(conn, username, hashed_str, fName, lName)['UID']
            #if this is a dictionary make it a string
            print('uID after signup: ' + str(uID))
            if uID != -1:
                print('logging you in! after signup')
                #actually log them in in the session
                session['uID'] = uID
                username = username=databaseAccess.getUser(conn, session.get('uID'))['username']
                return redirect(url_for('profile', username=username))
            else:
                print('username already taken on signup')
                session['uID'] = None
                flash("that username is already taken! try again")
                return redirect(url_for('signup'))
            username=databaseAccess.getUser(conn, session.get('uID'))['username']
            return redirect(url_for('profile', username=username))
        except Exception as e:
            print('form submission error in signup: ' + str(e))
            flash("form submission error :( try again!")
            return redirect( url_for('login'))
    



if __name__ == '__main__':

    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)

====================== calculator.py =====================

def car_emissions(miles_driven):
#returns number of kilograms emitted per year given monthy mileage
#assuming 404 grams emitted per mile on avg
	return ((404*miles_driven)/1000)*12


def plane_emissions(miles_flown):
#returns the number of kilograms emitted per year given yearly mileage
#assuming 53 pounds/mile on avg
	return miles_flown*53*0.45359237


def meat_emissions(lamb=0, beef=0, cheese=0, pork=0, turkey=0, chicken=0):
	#each meat is multiplied by its emissions and how many grams are in each serving
	#returns number of kilograms emitted per year given weekly servings
	return ((39.2*lamb*100 + 27*beef*85 + 13.5*cheese*43 + 12.1*pork*85 + 10.9*turkey*85 + 6.9*chicken*85)/1000)*52


def washer_emissions(hours_used):
#returns number of kilograms emitted per year given weekly hours used
#assumes one hour per load of laundry
	return ((255*hours_used)/1000*0.78)*52


def dryer_emissions(hours_used):
#returns number of kilograms emitted
#assumes one hour per load, and that the dryer is used for every load of washing
	return ((2790*hours_used)/1000*0.78)*52
====================== databaseAccess.py =====================
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify
                   )
import dbi
import calculator as calculator
import sys,math
# the database to use:
d = "fchange8_db"
# script testingSetup.sh replaces this like so:
# $ ./testingSetup.sh atinney_db

# ==========================================================
# The functions that do most of the work.

def getConn(db):
    '''Returns a database connection for that db'''
    dsn = dbi.read_cnf('../../.my.team_cnf') # for group db
    #dsn = dbi.read_cnf() #for own db
    conn = dbi.connect(dsn)
    conn.select_db(db)
    return conn

def getAchieveInfo(conn, AID):
    '''Returns the title, description, isRepeatable, isSelfReport of given AID'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select title, description, isRepeatable, isSelfReport
                    from achievement
                    where AID = %s''', [AID])
    return curs.fetchone()

def getAchievePeople(conn, AID):
    '''Returns the UID, first_Name, last_Name, username, and count
    for people who have completed this achievement'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select UID, first_Name, last_Name, username, count 
                    from completed inner join user using (UID) 
                    where AID = %s''', [AID])
    return curs.fetchall()

def getUsers(conn, searchTerm):
    '''Returns the UID, first name, last name, and username
    of all users that have a similar field to the search,
    as a list of dictionaries.
    '''
    curs = dbi.dictCursor(conn)
    searchTerm = "%" + searchTerm + "%"
    curs.execute('''select UID, first_Name, last_Name, username
                    from user
                    where first_Name like %s
                    or last_Name like %s
                    or username like %s''',
                    [searchTerm,searchTerm,searchTerm])
    return curs.fetchall()

def getAchievements(conn, searchFor):
    '''Returns the AID, title, description, isRepeatable, isSelfReport
    of all achievements that have a similar field to the search,
    as a list of dictionaries.
    '''
    curs = dbi.dictCursor(conn)
    searchFor = "%" + searchFor + "%"
    curs.execute('''select AID, title, description, isRepeatable, isSelfReport
                    from achievement
                    where title like %s
                    or description like %s
                    or isRepeatable like %s
                    or isSelfReport like %s''',
                    [searchFor,searchFor,searchFor,searchFor])
    return curs.fetchall()

def getAllAchievements(conn):
    '''Returns the AID, title, description, isRepeatable, isSelfReport 
    of all achievements, as a list of dictionaries.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select AID, title, description, isRepeatable, isSelfReport
                    from achievement''')
    return curs.fetchall()

def insertCompleted(conn, uid, aid):
    '''inserts into the completed table 
    '''
    curs = dbi.dictCursor(conn)
    #still buggy

    #returns 1 if row exists
    # rowExists=curs.execute('''select exists(select * 
    #                                 from completed 
    #                                 where UID=%s and AID=%s)''',
    #                           [uid, aid])
    # isRepeatable = getIsRepeatable(conn, aid)
    # isSelfReport = getIsSelfReport(conn, aid)

    # if rowExists==1:
    #     if isRepeatable:
    #         print("if statement")
    #         currCount = curs.execute('''select count 
    #                                 from completed 
    #                                 where UID=%s and AID=%s)''',
    #                              [uid, aid])
    #         updatedCount = currCount + 1

    #         curs.execute('''update completed set count=%s where UID=%s and AID=%s''',
    #                 [updatedCount, uid, aid])
    # else:
    #     print("else statement")
    curs.execute('''insert into completed(UID, AID) values(%s,%s)''',
                    [uid, aid])
    return curs.fetchone()

def getCompAchievements(conn, UID):
    '''Returns the AID, title, description, and count of this user's
    completed achievements, as a list of dictionaries.
    '''
    curs = dbi.dictCursor(conn)
    #also need to do join for count here
    curs.execute('''select completed.AID,title,description,count
                    from completed
                    join achievement
                    on achievement.AID=completed.AID
                    where UID=%s''', [UID])
    return curs.fetchall()

def getStarredAchieves(conn, UID):
    '''Returns the AID, title, and description of this user's
    starred achievements, as a list of dictionaries.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select starred.AID,title,description
                    from starred
                    join achievement
                    on achievement.AID=starred.AID
                    where UID=%s''', [UID])
    return curs.fetchall()

def getIsRepeatable(conn, AID):
    '''Returns whether or not this achievement is eligible
    for repetition. This is a Boolean return.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select isRepeatable from achievement where AID=%s''', [AID])
    
    #not checking for null cause if that happens it was our fault
    res = curs.fetchone()

    if res == 1: #in our world, 0 is false and 1 is true
        return True
    else:
        return False

def getIsSelfReport(conn, AID):
    '''Returns whether or not this achievement is eligible
    for self report. This is a Boolean return.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select isSelfReport from achievement where AID=%s''', [AID])
    
    #not checking for null cause if that happens it was our fault
    res = curs.fetchone()

    if res == 1: #in our world, 0 is false and 1 is true
        return True
    else:
        return False


def getReportedAchieves(conn, UID):
    '''Returns a simple list of AIDs for all completed user achievements
    that says if the achievement is currently reportable by the user.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select AID from completed
                    where UID=%s''', [UID])

    return list(map(lambda x: x['AID'], curs.fetchall()))

def getUserByUsername(conn, username):
    '''Returns user information, as a dictionary.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select UID, first_Name, last_Name, username
                    from user
                    where username=%s''', [username])
    return curs.fetchone()

def getUser(conn, UID):
    '''Returns user information, as a dictionary.
    '''
    curs = dbi.dictCursor(conn)
    curs.execute('''select first_Name, last_Name, username
                    from user
                    where UID=%s''', [UID])
    return curs.fetchone()

def getUserForAchievement(conn, UID, AID):
    '''Returns the first_Name, last_Name, username, and count
    for the specified user who has completed this achievement'''
    curs = dbi.dictCursor(conn)
    curs.execute('''select UID, first_Name, last_Name, username, count 
                    from completed inner join user using (UID)
                    where UID=%s and AID = %s''', [UID, AID])
    res = curs.fetchone()
    hasCount = True

    # means the user hasn't completed this achievement
    if res==None:
        res = getUser(conn, UID)
        hasCount = False

    return (res, hasCount)

def updateUserInfo(conn, UID, flights, driving, lamb, beef, \
                    cheese, pork, turkey, chicken, laundry):
    '''Updates the carbon footprint info for a given user 
    (works for users who have no previously entered info 
    and for users who are changing old info). 
    Does not return anything.'''
    curs = dbi.dictCursor(conn)
    curs.execute('''update user 
                            set miles_flown=%s, 
                            miles_driven=%s,
                            servings_lamb=%s,
                            servings_beef=%s,
                            servings_cheese=%s,
                            servings_pork=%s,
                            servings_turkey=%s,
                            servings_chicken=%s,
                            laundry=%s,
                            has_carbon_data=%s
                    where UID=%s''', [flights, driving, \
                    lamb, beef, cheese, pork, turkey, chicken, laundry, True, UID])


def doesUserHaveCarbonData(conn, UID):
    curs = dbi.dictCursor(conn)
    curs.execute(''' select has_carbon_data from user where UID=%s''', [UID])
    return curs.fetchone()['has_carbon_data']


def calculateUserFootprint(conn, UID):
    '''given a user's UID, get their info from the database and uses the
    carbon footprint calculator (calculator.py) to calculate and return 
    a total footprint'''
    #TODO: this works but the numbers seem to be slightly off. look into this more
    curs = dbi.dictCursor(conn)
    curs.execute(''' select 
                        miles_flown,
                        miles_driven,
                        servings_lamb,
                        servings_beef,
                        servings_cheese,
                        servings_pork,
                        servings_turkey,
                        servings_chicken,
                        laundry
                    from user where UID = %s
                ''', [UID])
    userData = curs.fetchone()
    print('userData in databaseaccess: ' + str(userData))
    total = calculator.plane_emissions(userData['miles_flown']) \
            + calculator.car_emissions(userData['miles_driven']) \
            + calculator.meat_emissions(userData['servings_lamb'], \
            userData['servings_beef'], userData['servings_cheese'], \
            userData['servings_pork'], userData['servings_turkey'], \
            userData['servings_chicken']) \
            + calculator.washer_emissions(userData['laundry']) \
            + calculator.dryer_emissions(userData['laundry'])
    return total


def getUIDOnLogin(conn, username):
    #returns the user ID of the user with this username and password, or
    #return -1 if it's an invalid username/password combo
    curs = dbi.dictCursor(conn)
    curs.execute('''select UID,password from user 
                    where username = %s ''',
                    [username])
    result = curs.fetchone()
    if result:
        return result
    else:
        return -1


def setUIDOnSignup(conn, username, hashed_password, firstName, lastName):
    #puts the username, hashed password, salt, in the database
    #returns the uid the database created for this user
    #TODO: add in checking to make sure usernames are unique!! the logic here relies on this so it HAS to get done!
    curs = dbi.dictCursor(conn)
    curs.execute('''insert into user (username, password, first_Name, last_Name, has_carbon_data) 
                    values (%s, %s, %s, %s, false)''',
                    [username, hashed_password, firstName, lastName])
    curs.execute('''select UID from user 
                    where username = %s 
                    and password = %s''', 
                    [username, hashed_password])
    return curs.fetchone()

#TODO: delete this once logins & signups are working
def getSaltByUsername(conn, username):
    #returns the salt associated with the given username
    #this is called when someone is logging in and we're checking their password
    curs = dbi.dictCursor(conn)
    curs.execute('''select salt from user where username = %s''', [username])
    return curs.fetchone()


def prettyRound(number):
    return math.floor(round(number,0))

# ==========================================================
# This starts the ball rolling, *if* the file is run as a
# script, rather than just being imported.    

if __name__ == '__main__':
    conn = getConn('wmdb')
    pl = getPeople(conn)
    for person in pl:
        print('{name} born on {date}'
              .format(name=person['name'],
                      date=person['birthdate']))
        

====================== database.sql =====================
-- this file sets up the 'database' for the 'Fueling-Change App'
-- The database consists of tables: 
drop table if exists completed;
drop table if exists starred;
drop table if exists user;
drop table if exists achievement;

/* User table will hold all of the user's information
Used to calculate the user's carbon footprint, as well as personal info */
Create table user(
	UID int auto_increment,
	first_Name varchar(30),
	last_Name varchar(30),
	footprint float,
	username varchar(30),
	password char(60),
	-- had to condense user and userform since can't have
	-- userform use UID as a primary key
	miles_flown int,
	miles_driven int,
	servings_lamb int,
	servings_beef int,
	servings_cheese int,
	servings_pork int,
	servings_turkey int,
	servings_chicken int,
	laundry int,
	has_carbon_data boolean not null DEFAULT false,
	Primary key (UID)
);

/* achievement table stores information
about all possible achievements a user can earn */
create table achievement(
	AID int auto_increment,
	title varchar(30),
	description varchar(50),
	isRepeatable boolean not null default 0,
	isSelfReport boolean not null default 0,
	-- boolean in mysql is tinyint(1)
	-- 0 is false
	Primary Key (AID)
);

/* achievement table will hold userIDs and achievement IDs as key value
pairs to indicate which users have completed what. the counter indicates
how many time a user has completed the achievement */
create table completed(
    UID int,
    AID int,
	Primary Key (UID, AID),
	count int not null default 1,
	ts timestamp DEFAULT CURRENT_TIMESTAMP
		on update CURRENT_TIMESTAMP,
	foreign key (UID) references user(UID)
        on update cascade
        on delete cascade
);

/* similar to the completed table, the starred table userIDs
and achievement IDs as key value pairs to indicate which users
certain users have starred certain achievements */
create table starred(
    UID int,
    AID int,
	Primary Key (UID, AID),
	foreign key (UID) references user(UID)
        on update cascade
        on delete cascade
);

====================== makeAchieves.sql =====================
-- Creating achievements
insert into achievement(title,description)
values ('Joined Fueling Change!','Started their journey to lower carbon footprint');

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('No Meat for a Week','Do not eat meat for seven days.',1,1); -- 1 is true, 0 is false

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('Carpooled','Carpooled to Work/School.',1,1);

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('Vegan','Became Vegan!',1,1);

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('Vegetarian','Became Vegetarian',1,1);

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('Earthly Drying','Line-Dried the clothing',1,1);

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('+1 Tree','Planted A Tree',1,1);

insert into achievement(title,description,isRepeatable,isSelfReport)
values ('Electric Cars Go VROOM!','Buy an electric car.',1,1);

insert into achievement(title,description,isSelfReport)
values ('Earth Powers','Upgraded to geothermal energy.',1);

insert into achievement(title,description,isSelfReport)
values ('Solar Powers','Installed solar panels.',1);

insert into achievement(title,description,isSelfReport)
values ('Wind Powers','Built a personal wind turbine.',1);

insert into achievement(title,description)
values ('Top 10','Claim a spot in the top 10 percent of users.');

insert into achievement(title,description)
values ('Top 50','Claim a spot in the top 50 percent of users.');


====================== webpageTest.sql =====================
-- Creating users for testing
insert into user(first_Name,last_Name,footprint,username,password,
                miles_flown,miles_driven,servings_lamb,servings_beef,
                servings_cheese,servings_pork,servings_chicken,
                servings_turkey,laundry)
values ('alissa','tinney',4000.0,'atinney','abc',5,3,20,30,2,4,50,30,5);

insert into user(first_Name,last_Name,footprint,username,password,
                miles_flown,miles_driven,servings_lamb,servings_beef,
                servings_cheese,servings_pork,servings_chicken,
                servings_turkey,laundry)
values ('estrella','garcia',5000.0,'egarcia2','cba',50,32,2,3,2,1,5,3,2);
-- Inserting into completed
insert into completed(UID,AID)
values(1,1);

insert into completed(UID,AID)
values(1,2);

insert into completed(UID,AID)
values(1,7);

insert into completed(UID,AID)
values(1,9);
--
insert into completed(UID,AID)
values(2,1);

insert into completed(UID,AID)
values(2,7);

insert into completed(UID,AID)
values(2,10);

-- Inserting into starred
insert into starred(UID,AID)
values(1,3);

insert into starred(UID,AID)
values(1,4);

insert into starred(UID,AID)
values(1,5);
--
insert into starred(UID,AID)
values(2,2);

insert into starred(UID,AID)
values(2,5);

insert into starred(UID,AID)
values(2,8);

-- Showing results
-- select * from user;
-- select * from achievement;
-- select * from completed;
-- select * from starred;
====================== templates/achieveinfo.html =====================
{% extends "achievementSearch.html" %} 

{% block body %} 
<h1>Achievement # {{achieveID}} : {{info['title']}}</h1>
<!-- Display the description-->
<p>{{info['description']}}</p>
<!-- Allow the user to check this as completed-->
{%  if info['isSelfReport'] == 1 and thisUser != None: %}
    <!-- <p>{{user}}</p> -->
    <p>Did you complete this achievement?</p>>
    <button data-tt="{{achieveID}}" class="report-button">Yes!</button>
    <p>{{logged_in}}</p>
{% endif %}
<!-- implement an undo function if they accidentally mark as completed-->

<!-- Display all the people who have completed this achievement-->
{% if users |length != 0: %}

<h2 id = "users_list">Users who have reached this achievement!</h2> 

<table id= "achievers"> 
    <tr>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Username</th>
        <th> number of times achieved </th>
    </tr>

    {% for user in users %}
    <tr data-id = "{{user['AID']}}"> 
        <td><span class="first">{{user['first_Name']}}</span></td>
        <td class="last">{{user['last_Name']}}</td>
        <td class="username"><a href="{{url_for('profile', username=user['username'])}}">{{user['username']}}</a></td>
        <td class="count">{{user['count']}}</td>
    </tr>
    {% endfor %}

</table>

{% else %}

<h2 id = "no_users_yet">Be the first to reach this achievement!</h2>

{% endif %}


{% endblock %}

{% block JSJQ %}
<script>
var URL = "{{url_for('updateCompleted')}}";
</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="{{url_for('static',filename='achievements.js')}}"></script>
{% endblock %}
====================== templates/achievementSearch.html =====================
{% extends "main.html" %}

{% block navigation %}
    <div id="navigation">
        <ul>
        <li><a href="/">Home</a></li>
        <li><a class="active" href="/achievements/">Search Achievements</a></li>
        <li><a href="/users/">Search Users</a></li>
            {% if isLoggedIn %} <!-- hidden until login -->
                <li><a href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% else %} <!-- hidden when logged in -->
                <li><a href="/login/">Login</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}


{% block search %}
<form id="searchTop" method=POST action="/achievements/">
    <label>Search: <input id="searchtermTop" placeholder="Search" name="searchterm"></label>
    <button id="searchbutton" type="submit" name="submit" value="Search">Search</button>
</form>
{% endblock %}


{% block feature %}
        <!-- space to add in fun facts feature later -->
{% endblock %}


{% block body %}
    
<!--Handles cases where user searched for an achievement and when there was no search term-->
    {% if title == "" %}
        <h1>Showing All Achievements:</h1>
    {% else %}
        <h1>Showing Achievements Matching <i>{{title}}</i>:</h1>
    {% endif %}
    
    <table id="achieves">
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th class="small">Repeatable</th>
            {% if isLoggedIn != None %}
                <th class="small">Star Achievement</th>
            {% endif %}
        </tr>
        
        <!--iterate over achievements in the search results and display them in a table-->
        {% for achievement in achievements %}
        {% set aID = achievement['AID'] %}
        {% set repeatable = achievement['isRepeatable'] %}
        <tr data-tt="{{aID}}">
            <td><a href="{{url_for('achieveinfo', AID = achievement['AID'])}}">{{achievement['title']}}</a></td>
            <td>{{achievement['description']}}</td>
            <td class="small"> 
                {% if repeatable == 1 %}
                    Yes
                {% else %}
                    No
                {% endif %}</td>

            <!-- display button for starring achievements -->
            {% if isLoggedIn != None %}
                <!-- user has it, it's repeatable, and it's self-reportable -->
                {% if aID in reps %}
                    <td class="small"><button class="star-button"><a>Remove Star</a></button></td>
                <!-- user doesn't have it, it's repeatable, and it's self-reportable -->
                {% else %}
                    <td class="small"><button class="star-button"><a>Add Star</a></button></td>
                {% endif %}
            {% endif %}
            
        </tr>
        {% endfor %}
    </table>
{% endblock %}
====================== templates/login.html =====================
{% extends "profile.html" %}
<!-- Two load cases -->
<!-- (1) Screen to log in -->
<!-- (2) Confirmation of logging off -->

{% block navigation %}
    <div id="navigation">
        <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/achievements/">Search Achievements</a></li>
        <li><a href="/users/">Search Users</a></li>
            {% if isLoggedIn %} <!-- hidden until login -->
                <li><a href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a class="active" href="/login/">Log Out</a></li>
            {% else %} <!-- hidden when logged in -->
                <li><a class="active" href="/login/">Login</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}
====================== templates/login_page.html =====================
{% extends "login.html" %} 
<!--only gets loaded when the user isn't logged in and wants to log in now-->
<!--still a lot of UI work to be done here but the skeleton is done-->

{% block body %}

<h1>{{title}}</h1>

<form action="{{url_for('setUID')}}" method="POST">
    
    <label>Username:<input type="text" name="username"></label>
    <label>Password: <input type="password" name="password"></label>
    <input type="submit" value="Log In">
</form>

<p>Don't have an account yet? <a href="{{url_for('signup')}}">Sign up here!</a></p>

{% endblock %}
====================== templates/main.html =====================
<!-- main HTML file that most templates inherit from -->
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="Ellie Czepiel, Estrella Garcia, & Alissa Tinney">
    <title>Fueling Change</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
     
</head>

<body>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    
    <div id="content">
    <div id="textpad">
    {% block navigation %}
        <div id="navigation">
            <ul>
            <li><a class="active" href="/">Home</a></li>
            <li><a href="/achievements/">Search Achievements</a></li>
            <li><a href="/users/">Search Users</a></li>
                {% if isLoggedIn %} <!-- hidden until login -->
                    <li><a href="/profile/{{userURL}}/">My Profile</a></li>
                    <li><a href="/login/">Log Out</a></li>
                {% else %} <!-- hidden when logged in -->
                    <li><a href="/login/">Login</a></li>
                {% endif %}
            </ul>
        </div>
    {% endblock %}

{% with messages = get_flashed_messages() %}
    {% if messages %}
        <div id="messages">
        {% for msg in messages %}
            <p>{{msg}}</p>
        {% endfor %}
        </div>
    {% endif %}
{% endwith %}
    
    <div id="slide">
        <script>
            var x = document.getElementById("slide");
            if(x.style.display==="none"){
                x.style.display = "block";
    
            }
            else{
                x.style.display = "none";
            }           
            ;
        </script>
    {% block search %}
    <!-- search feature goes here-->
    {% endblock %}

    {% block feature %}
        <!-- fun fact goes here -->
    {% endblock %}
    
    {% block body %}
    <h1>{{title}}</h1>
    
    <p>
        Welcome to Fueling Change. Select from the options above to interact with our website.
    </p>
    {% endblock %}

    {% block footerSearch %}
    {% endblock %}
    </div> <!-- end of textpad div -->
    </div> <!-- end of content div -->
    </div> <!-- end of slide div -->

    <div id="picture">
    {% block picture %}
        <!-- place for scenic picture to go here later -->
    {% endblock %}
    </div> <!-- end of picture div -->


    <!-- Sliding! -->
    <script>
        $('#slide').slideDown(500);
    </script>

{% block JSJQ %}
{% endblock %}


</body>
</html>
====================== templates/profile.html =====================
{% extends "main.html" %} 
<!-- 2 different load cases: -->
<!-- (1) Their account and logged in -->
<!-- (2) Another account OR their account and not logged in -->

{% block navigation %}
    <div id="navigation">
        <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/achievements/">Search Achievements</a></li>
        <li><a href="/users/">Search Users</a></li>
            {% if thisUser and request.method == "GET" %} <!-- hidden until login -->
                <li><a class="active" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% elif thisUser %} <!-- hidden until login -->
                <li><a class="halfactive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% elif isLoggedIn != None %}
                <li><a class="quarteractive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% else %} <!-- hidden when logged in -->
                <li><a class="quarteractive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Login</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}


{% block body %}
    {% if request.method == "GET" %}
        <!-- (1) their own account and logged in -->
        <h1>Hi {{title}}</h1> 
        <p>Your current emissions are {{emissions}} kilograms of carbon dioxide per year</p>
        <p>What would you like to do today?</p>

        <form id="reporting" method=POST action="/useraction/{{userURL}}/">
            <button id="reportbtn" class="report-button" type="submit" name="submit" value="report">Report Achievements</button>
        </form>

        <form id="achieving" method=POST action="/profile/{{userURL}}/">
            <button id="reportbtn" class="report-button" type="submit" name="submit" value="stats">View My Statistics</button>
            <!-- statistics also includes achievements -->
        </form>

    <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->
    <!-- (2) Another account OR their account and not logged in -->
    {% else %}
    <h1>Viewing {{title}}'s Achievements</h1>
        <!-- user statistics, percentiles, and footprint -->
        <!-- footprint here -->
        <p>Emissions: {{emissions}} kilograms of carbon dioxide per year</p>
        
        <!-- use a class="exlong" for whatever the largest element is -->
        <!-- completed achievements -->
        <div class="centerme">
        <h2><u>Completed Achievements</u></h2>
        <table class="exlong" id="completedAchieves">
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Count</th>
            </tr>
            
            {% for achievement in compAchis %}
            {% set aID = achievement['AID'] %}
            <tr data-tt="{{aID}}">
                <td class="title">{{achievement['title']}}</td>
                <td class="description">{{achievement['description']}}</td>
                <td class="count">{{achievement['count']}}</td>
            </tr>
            {% endfor %}
        </table>

        <!-- starred achievements -->
        <h2><u>Starred Achievements</u></h2>
        <table id="starredAchieves">
            <tr>
                <th>Title</th>
                <th>Description</th>
            </tr>
            
            {% for achievement in starAchis %}
            {% set aID = achievement['AID'] %}
            <tr data-tt="{{aID}}">
                <td class="title">{{achievement['title']}}</td>
                <td class="description">{{achievement['description']}}</td>
            </tr>
            {% endfor %}
        </table>
        </div> <!-- end of centerme div -->
    {% endif %}
{% endblock %}
====================== templates/searchedProfile.html =====================
{% extends "userSearch.html" %}

{% block body %}
    {% if request.method == "GET" %}
        
        <h1>Viewing {{title}}'s Achievements</h1>
        <!-- user statistics, percentiles, and footprint -->
        <!-- footprint here -->
        <p>Emissions: {{emissions}} kilograms of carbon dioxide per year</p>
        
        <!-- use a class="exlong" for whatever the largest element is -->
        <!-- completed achievements -->
        <div class="centerme">
        <h2><u>Completed Achievements</u></h2>
        <table class="exlong" id="completedAchieves">
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Count</th>
            </tr>
            
            {% for achievement in compAchis %}
            {% set aID = achievement['AID'] %}
            <tr data-tt="{{aID}}">
                <td class="title">{{achievement['title']}}</td>
                <td class="description">{{achievement['description']}}</td>
                <td class="count">{{achievement['count']}}</td>
            </tr>
            {% endfor %}
        </table>

        <!-- starred achievements -->
        <h2><u>Starred Achievements</u></h2>
        <table id="starredAchieves">
            <tr>
                <th>Title</th>
                <th>Description</th>
            </tr>
            
            {% for achievement in starAchis %}
            {% set aID = achievement['AID'] %}
            <tr data-tt="{{aID}}">
                <td class="title">{{achievement['title']}}</td>
                <td class="description">{{achievement['description']}}</td>
            </tr>
            {% endfor %}
        </table>
        </div> <!-- end of centerme div -->
    {% endif %}
{% endblock %}
====================== templates/signup.html =====================
{% extends "login.html" %} 
<!--user wants to sign up-->
<!--still a lot of UI work to be done here but the skeleton is done-->
<!--this is not the same template as login_page because eventually it'll have 
carbon footprint questions on it too-->

{% block body %}

<form action="{{url_for('signup')}}" method="POST">
    <label>Username: <input type="text" name="username" label="username"></label>
    <label>Password: <input type="password" name="password1" label="username"></label>
    <label>Re-type Password: <input type="password" name="password2" label="username"></label>
    <label>First Name: <input type="firstName" name="firstName" label="firstName"></label>
    <label>Last Name: <input type="lastName" name="lastName" label="lastName"></label>
    <input type="submit" value="Sign Up">
</form>

{% endblock %}
====================== templates/useraction.html =====================
{% extends "profile.html" %} 
<!-- Two different load cases: -->
<!-- (1) User pressed report button on profile page -->
<!-- (2) User pressed find user button on profile page -->

{% block navigation %}
    <div id="navigation">
        <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/achievements/">Search Achievements</a></li>
        <li><a href="/users/">Search Users</a></li>
            {% if thisUser %} <!-- hidden until login -->
                <li><a class="halfactive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% elif isLoggedIn != None %}
                <li><a class="quarteractive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% else %} <!-- hidden when logged in -->
                <li><a class="quarteractive" href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Login</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}

{% block flashing %}
    <!-- flashes for unfruitful searches will go here -->
{% endblock %}

{% block body %}
    {% if request.form['submit'] == 'report' %}
    <!-- (1) THIS IS WHERE THE USER CAN INSERT SELF-REPORTED INFORMATION -->
    <!-- empty fields should be ignored -->

    <h1>Update Information</h1>
    <!-- How they add more data or insert data for the first time -->
    <div class="centerme">
    <form class="bigform" id="update" method=POST action="/useraction/report/{{userURL}}/">
        <table>
        <tr><td class="forform"><label>Flights: <input type="number" id="flights" placeholder="Annual Flight Mileage" name="flights"></label></td></tr>
        <tr><td class="forform"><label>Drives: <input type="number" id="drives" placeholder="Monthly Driving Mileage" name="drives"></label></td></tr>
        
        <tr><td class="forform"><fieldset>
            <legend>Car Type</legend>
            <label class="space">
                <input required type="radio" name="cartype" value="gas">
                GAS
            </label>
            <label class="space">
                <input required type="radio" name="cartype" value="hybrid">
                HYBRID
            </label>
            <label>
                <input required type="radio" name="cartype" value="electric">
                ELECTRIC
            </label>
            </fieldset>
        </td></tr>

        <tr><td class="forform"><label>Lamb: <input type="number" id="lamb" placeholder="Lamb Servings per Week" name="lamb"></label></td></tr>
        <tr><td class="forform"><label>Beef: <input type="number" id="beef" placeholder="Beef Servings per Week" name="beef"></label></td></tr>
        <tr><td class="forform"><label>Cheese: <input type="number" id="cheese" placeholder="Cheese Servings per Week" name="cheese"></label></td></tr>
        <tr><td class="forform"><label>Pork: <input type="number" id="pork" placeholder="Pork Servings per Week" name="pork"></label></td></tr>
        <tr><td class="forform"><label>Turkey: <input type="number" id="turkey" placeholder="Turkey Servings per Week" name="turkey"></label></td></tr>
        <tr><td class="forform"><label>Chicken: <input type="number" id="chicken" placeholder="Chicken Servings per Week" name="chicken"></label></td></tr>
        <tr><td class="forform"><label>Laundry: <input type="number" id="laundry" placeholder="Laundry per Week" name="laundry"></label></td></tr>

        <tr><td class="forform"><fieldset>
            <legend>Typical Drying Style</legend>
                <label class="space">
                    <input required type="radio" name="drytype" value="dryer">
                    DRYER
                </label>
                <label class="space">
                    <input required type="radio" name="drytype" value="air dry">
                    AIR DRY
                </label>
                </fieldset>
            </td></tr>

        <tr><td class="forform">
            <button id="updatebtn" type="submit" name="submit" value="updateInfo">Submit!</button>
        </td></tr>

        </table>
    </form>
    </div> <!-- end of centerme div -->
    <!-- list of achievements they haven't done but are self-report -->
    <!-- prolly need to do a join for this gah! -->


    <!-- ############################################### -->
    {% else %}
    <!-- (2) THIS IS WHERE THE USER CAN SEARCH FOR OTHER USERS -->
    <!-- this submission shows a list of linked users that match the search -->
    <!-- if user doesn't exist, list is empty and flash to tell them this -->
    <!-- link format: /profile/searchedfirstname-searchedlastname-searchedUID -->
    
    <h1>Search Users</h1>

    <!-- they can search again if they want -->
    <form id="uSearch" method=POST action="/useraction/{{userURL}}/">
        <input id="searchterm" placeholder="Search" name="searchterm">
        <button id="reportbtn" class="report-button" type="submit" name="submit" value="userSearch">Search Users</button>
    </form>

    <!-- set the searched variable true if people found -->
    
    <!-- list of users that the search found -->

    {% endif %}

{% endblock %}
====================== templates/userSearch.html =====================
{% extends "achievementSearch.html" %}

{% block navigation %}
    <div id="navigation">
        <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/achievements/">Search Achievements</a></li>
        <li><a class="active" href="/users/">Search Users</a></li>
            {% if isLoggedIn %} <!-- hidden until login -->
                <li><a href="/profile/{{userURL}}/">My Profile</a></li>
                <li><a href="/login/">Log Out</a></li>
            {% else %} <!-- hidden when logged in -->
                <li><a href="/login/">Login</a></li>
            {% endif %}
        </ul>
    </div>
{% endblock %}


{% block search %}
<form id="uSearch" method=POST action="/users/">
    <label>Search: <input id="searchterm" placeholder="Search" name="searchterm"></label>
    <button id="reportbtn" class="report-button" type="submit" name="submit" value="userSearch">Search Users</button>
</form>
{% endblock %}


{% block body %}    
<!--Handles cases where user searched for an achievement and when there was no search term-->
    {% if title == "" %}
        <h1>Search for Users Above</h1>
    {% else %}
        <h1>Showing Users Matching <i>{{title}}</i>:</h1>
    {% endif %}
    
    <table id="searchedUsers">
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Username</th> <!--link on this.-->
            <!-- <th>Footprint</th> -->
        </tr>
        
        <!--iterate over users in the search results and display them in a table-->
        {% if title != "" %}
            {% for usr in users %}
            <tr>
                <td>{{usr['first_Name']}}</td>
                <td>{{usr['last_Name']}}</td>
                <td><a href="{{url_for('searchedProfile', user = usr['username'])}}">{{usr['username']}}</a></td>
            </tr>
            {% endfor %}
        {% endif %}
    </table>
{% endblock %}
====================== static/achievements.js =====================
$(".report-button").click(add_achieve);

var clicked = false;

/*
* @param event
* changes the text of the button to oops and adds the user to the list of users 
*/
function add_achieve(event){
    console.log("clicked");
    var AID =  $(this).attr('data-tt'); 
    console.log(AID);
    if (clicked == false){
        $(this).text("oops");
        clicked = true;
        // append_achiever(1, "meeeee", "GARCIA");
        send_completed(AID);
    }//else{ //if the oops is clicked then it should send a response to the backend to remove the achievement
    //     $(this).text("Yes!");
    //     clicked = false;
    // }
}

function append_achiever(AID, first, last, username, count){ //should take in a response 
    var rowitem = '<tr data-id = "' + AID + '"> <td class ="first">"' + first + 
                '"</td> <td class ="last">"' + last + '"</td> <td class ="username">' + 
                username + '</td> <td class ="count">' + count + '</td></tr>';
    $("#achievers").append(rowitem);
}

// TODO: make the hyperlink appear
function append_achiever2(resp){ //should take in a response 
    var rowitem = '<tr data-id = "' + resp.AID + '"> <td class ="first">' + resp.first + 
    '</td> <td class ="last">' + resp.last + '</td> <td class ="username">' + 
    resp.username + '</td> <td class ="count">' + resp.count + '</td></tr>';
    $("#achievers").append(rowitem);
    console.log("sucess!");
}

function send_completed(aid){
    $.post(URL, {'aid': aid}, append_achiever2, 'json');
}



====================== static/style.css =====================
/* stylesheet for the entire app */


/* how to do variables: https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties */
:root {
    --green: #78C31E;
    --dark-green: #147818;
    --light-blue: #1A94F9;
    --blue: #0078FA;
    --dark-blue: #0214A4;
    --cream: #FFFDD0;
}

/* style similar to hwk5 */
body {
    background-color: var(--blue);
}

H1 {
    color: var(--dark-green);
    font-size: 200%;
}

H2 {
    color: var(--dark-green);
    text-align: center;
}

#messages { 
    color: purple;
    font-size: large;
	font-style: italic;
}

form {
    display: inline-block;
    border: 2px solid var(--blue);
    padding: 2ex;
    border-radius: 2ex;
    margin-top: 30px;
    width: 250px;
    text-align: center;
}

.bigform {
    width: 500px;
}

.space {
    margin-right: 10px;
}

.exlong {
    margin-bottom: 100px;
}

.long {
    margin-bottom: 20px;
}

[type=submit] {
    font-size: 1em;
    font-weight: normal;
    border: 1px solid var(--blue);
    border-radius: 0.5em;
    background-color: #d0FFFF;
}

fieldset {
    display: inline-block;
}

#iconlist {
    list-style-type: none;  /* no bullets */
    padding: 0px;
}

#iconlist li {
    display: inline;
}

/* Navigation bar */
/* from: https://www.w3schools.com/css/css_navbar.asp */
ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: var(--blue);
}
  
li {
    float: left;
}
  
li a {
    display: block;
    color: yellow;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-weight: bold;
    font-size: 20px;
    border-bottom: 10px solid var(--blue);
}
  
li a:hover:not(.active) {
    background-color: var(--dark-green);
    border-bottom: 10px solid var(--dark-green);
}
  
.active {
    background-color: var(--dark-green);
    border-bottom: 10px solid var(--dark-green);
}

.halfactive {
    background-color: var(--blue);
    border-bottom: 10px solid var(--dark-green);
}

.quarteractive {
    background-color: var(--blue);
    border-bottom: 10px solid var(--dark-blue);
}

/* divs */
#content {
    background-color: var(--cream);
    width: 100%;
    height: auto;
    padding-bottom: 20px;
}

#textpad {
    padding-left: 20px;
}

.centerme {
    text-align: center;
}

/* For the table */
table {
    margin-left:auto; 
    margin-right:auto;
}

th {
    width: 300px;
    font-size: 110%;
}

.small {
    width: 100px;
}

th, td {
    text-align: center;
    overflow: hidden;
}

/* TODO: figure out why this isn't working*/
.forform {
    margin: 10px;
}
